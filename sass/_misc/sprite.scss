// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$ico-fb-name: 'ico-fb';
$ico-fb-x: 0px;
$ico-fb-y: 0px;
$ico-fb-offset-x: 0px;
$ico-fb-offset-y: 0px;
$ico-fb-width: 30px;
$ico-fb-height: 30px;
$ico-fb-total-width: 100px;
$ico-fb-total-height: 100px;
$ico-fb-image: '../img/sprite.png';
$ico-fb: (0px, 0px, 0px, 0px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-fb', );
$ico-mail-name: 'ico-mail';
$ico-mail-x: 35px;
$ico-mail-y: 0px;
$ico-mail-offset-x: -35px;
$ico-mail-offset-y: 0px;
$ico-mail-width: 30px;
$ico-mail-height: 30px;
$ico-mail-total-width: 100px;
$ico-mail-total-height: 100px;
$ico-mail-image: '../img/sprite.png';
$ico-mail: (35px, 0px, -35px, 0px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-mail', );
$ico-tg-name: 'ico-tg';
$ico-tg-x: 0px;
$ico-tg-y: 35px;
$ico-tg-offset-x: 0px;
$ico-tg-offset-y: -35px;
$ico-tg-width: 30px;
$ico-tg-height: 30px;
$ico-tg-total-width: 100px;
$ico-tg-total-height: 100px;
$ico-tg-image: '../img/sprite.png';
$ico-tg: (0px, 35px, 0px, -35px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-tg', );
$ico-tw-name: 'ico-tw';
$ico-tw-x: 35px;
$ico-tw-y: 35px;
$ico-tw-offset-x: -35px;
$ico-tw-offset-y: -35px;
$ico-tw-width: 30px;
$ico-tw-height: 30px;
$ico-tw-total-width: 100px;
$ico-tw-total-height: 100px;
$ico-tw-image: '../img/sprite.png';
$ico-tw: (35px, 35px, -35px, -35px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-tw', );
$ico-vk-name: 'ico-vk';
$ico-vk-x: 70px;
$ico-vk-y: 0px;
$ico-vk-offset-x: -70px;
$ico-vk-offset-y: 0px;
$ico-vk-width: 30px;
$ico-vk-height: 30px;
$ico-vk-total-width: 100px;
$ico-vk-total-height: 100px;
$ico-vk-image: '../img/sprite.png';
$ico-vk: (70px, 0px, -70px, 0px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-vk', );
$ico-ya-name: 'ico-ya';
$ico-ya-x: 70px;
$ico-ya-y: 35px;
$ico-ya-offset-x: -70px;
$ico-ya-offset-y: -35px;
$ico-ya-width: 30px;
$ico-ya-height: 30px;
$ico-ya-total-width: 100px;
$ico-ya-total-height: 100px;
$ico-ya-image: '../img/sprite.png';
$ico-ya: (70px, 35px, -70px, -35px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-ya', );
$ico-yt-name: 'ico-yt';
$ico-yt-x: 0px;
$ico-yt-y: 70px;
$ico-yt-offset-x: 0px;
$ico-yt-offset-y: -70px;
$ico-yt-width: 30px;
$ico-yt-height: 30px;
$ico-yt-total-width: 100px;
$ico-yt-total-height: 100px;
$ico-yt-image: '../img/sprite.png';
$ico-yt: (0px, 70px, 0px, -70px, 30px, 30px, 100px, 100px, '../img/sprite.png', 'ico-yt', );
$spritesheet-width: 100px;
$spritesheet-height: 100px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($ico-fb, $ico-mail, $ico-tg, $ico-tw, $ico-vk, $ico-ya, $ico-yt, );
$spritesheet: (100px, 100px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
